# -*- coding: utf-8 -*-
"""predictor

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F4o6pThsD9UrAGUbKUO_cPoC15Y5mRzA
"""

import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np
import os
import gradio as gr
from sklearn.metrics import confusion_matrix, roc_curve, auc
import plotly.express as px
import plotly.graph_objects as go

# Modeli yükle
model = load_model("chest_xray_model.h5")

# Tek görsel tahmini
def predict_xray(img):
    img = img.resize((224,224))
    img_array = image.img_to_array(img)/255.0
    img_array = np.expand_dims(img_array, axis=0)
    prob = model.predict(img_array)[0][0]
    prediction = "PNEUMONIA" if prob > 0.5 else "NORMAL"
    confidence = prob if prob > 0.5 else 1-prob
    confidence = round(confidence*100,2)
    return f"{prediction} ({confidence}%)"

# Test set performans grafikleri
def test_set_performance(test_dir):
    if not os.path.exists(test_dir):
        return "Test set folder not found.", None, None

    from tensorflow.keras.preprocessing.image import ImageDataGenerator
    test_datagen = ImageDataGenerator(rescale=1./255)
    test_set = test_datagen.flow_from_directory(
        test_dir,
        target_size=(224,224),
        batch_size=32,
        class_mode='binary',
        shuffle=False
    )

    num_samples = min(200, len(test_set.classes))
    y_true = test_set.classes[:num_samples]
    y_pred_prob = model.predict(test_set)[:num_samples].ravel()
    y_pred = (y_pred_prob>0.5).astype(int)

    # Confusion Matrix
    cm = confusion_matrix(y_true, y_pred)
    cm_fig = px.imshow(cm,
                       labels=dict(x="Predicted", y="Actual", color="Count"),
                       x=['NORMAL','PNEUMONIA'], y=['NORMAL','PNEUMONIA'],
                       text_auto=True,
                       color_continuous_scale='Blues')

    # ROC Curve
    fpr, tpr, _ = roc_curve(y_true, y_pred_prob)
    roc_auc = auc(fpr, tpr)
    roc_fig = go.Figure()
    roc_fig.add_trace(go.Scatter(x=fpr, y=tpr, mode='lines', name=f'ROC curve (AUC={roc_auc:.2f})'))
    roc_fig.add_trace(go.Scatter(x=[0,1], y=[0,1], mode='lines', line=dict(dash='dash'), name='Random'))
    roc_fig.update_layout(xaxis_title='False Positive Rate', yaxis_title='True Positive Rate', title='ROC Curve')

    return f"Test set sample {num_samples} images", cm_fig, roc_fig

# Gradio arayüzü
with gr.Blocks() as demo:
    gr.Markdown("## Chest X-Ray Pneumonia Predictor")

    with gr.Tab("Single Image Prediction"):
        img_input = gr.Image(type="pil", label="Upload X-ray Image")
        pred_output = gr.Textbox(label="Prediction")
        img_btn = gr.Button("Predict")
        img_btn.click(predict_xray, inputs=img_input, outputs=pred_output)

    with gr.Tab("Test Set Performance"):
        test_dir_input = gr.Textbox(label="Test Set Folder Path", value="chest_xray/test")
        test_output_text = gr.Textbox(label="Status")
        cm_plot = gr.Plot(label="Confusion Matrix")
        roc_plot = gr.Plot(label="ROC Curve")
        test_btn = gr.Button("Generate Graphs")
        test_btn.click(test_set_performance, inputs=test_dir_input, outputs=[test_output_text, cm_plot, roc_plot])

demo.launch(share=True)

!pip uninstall -y gradio jsonschema
!pip install gradio==3.41.0 jsonschema==4.17.3

